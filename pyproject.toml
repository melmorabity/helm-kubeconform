[project]
authors = [
  { name = "Mohamed El Morabity", email = "melmorabity@fedoraproject.org" },
]
classifiers = ["Programming Language :: Python :: 3"]
description = "Kubeconform Helm plugin"
keywords = [
  "helm",
  "helm-chart",
  "helm-plugin",
  "kubeconform",
  "lint",
  "linter",
  "validate",
  "validator",
]
license = { text = "GPL-3.0-or-later" }
name = "helm-kubeconform"
readme = "README.md"
requires-python = ">=3.8"
version = "0.6.7.1"

[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools"]

[project.scripts]
pre-commit-helm-kubeconform = "helm_kubeconform.pre_commit:main"

[project.optional-dependencies]
dev = [
  "Flake8-pyproject",
  "bandit",
  "black",
  "flake8",
  "helm-kubeconform[test]",
  "mypy",
  "pre-commit",
  "pydocstyle[toml]",
  "pylint",
  "pylint-per-file-ignores",
  "ruff",
  "tox",
  "types-setuptools",
  "typing_extensions",
]
test = ["pre-commit", "pytest", "pytest-cov", "tox"]

[tool.setuptools]
packages = ["helm_kubeconform"]

[tool.bandit]
exclude_dirs = [".tox", ".venv", "build", "coverage"]
skips = [
  "B404", # import_subprocess
  "B603", # subprocess_without_shell_equals_true
  "B607", # start_process_with_partial_path
]

[tool.black]
line-length = 79
skip_magic_trailing_comma = true
target-version = ["py38"]

[tool.coverage.run]
omit = ["tests/*"]

[tool.flake8]
exclude = [".tox", ".venv", "build", "coverage"]
max-line-length = 79

[tool.isort]
add_imports = ["from __future__ import annotations"]
force_single_line = true
force_sort_within_sections = true
line_length = 79
profile = "black"
py_version = 38

[tool.mypy]
exclude = ["build"]
python_version = "3.8"
strict = true
strict_optional = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[tool.pydocstyle]
convention = "google"
match_dir = "^(?!build$|tests$|\\.).*$"

[tool.pylint.main]
py-version = "3.8"

[tool.pylint.master]
ignore = [".tox", ".venv", "build", "coverage"]
load-plugins = ["pylint_per_file_ignores"]

[tool.pylint.format]
max-line-length = 79

[tool.pylint.messages_control]
disable = ["magic-value-comparison"]

[tool.pylint-per-file-ignores]
tests = "missing-class-docstring,missing-function-docstring,missing-module-docstring"

[tool.pytest.ini_options]
addopts = [
  "--cov-report=term-missing",
  "--cov-report=xml:coverage/pytest/cobertura.xml",
  "--cov=helm_kubeconform",
]

[tool.ruff]
line-length = 79
target-version = "py38"

[tool.ruff.lint]
ignore = [
  "COM812", # flake8-commas
  "FBT",    # flake8-boolean-trap
  "S603",   # flake8-bandit
  "S607",   # flake8-bandit
  "TRY",    # tryceratops
]
select = ["ALL"]

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.isort]
force-single-line = true
force-sort-within-sections = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  "D",  # pydocstyle
  "PT", # flake8-pytest-style
]

[tool.tox]
legacy_tox_ini = """
[tox]
min_version = 4.0
envlist = py38,py39,py310,py311,py312
skip_missing_interpreters = True

[testenv]
deps = -e .[test]
allowlist_externals = bash
commands =
  pytest
  bash shellspec --kcov --sandbox --pattern "*/unit_testing_*_spec.sh"

[testenv:lint]
deps = -e .[dev]
commands =
  pre-commit run -a

[testenv:acceptance]
allowlist_externals = bash
deps = -e .[test]
commands =
  bash shellspec --pattern "*/acceptance_*_spec.sh"
"""
